from collections import defaultdict
from datetime import datetime
from unittest import TestCase

from models import TaskModel
from models.task import TaskStatus


class TestTask(TestCase):
    def test_create_task(self):
        now = datetime.now()
        task = TaskModel(
            name="Example Task",
            description="This is an example task",
            due_date=datetime(2024, 2, 20),
            status=TaskStatus.TODO,
            created_at=now,
            updated_at=now
        )

        self.assertEqual(task.name, "Example Task")
        self.assertEqual(task.description, "This is an example task")
        self.assertEqual(task.due_date, datetime(2024, 2, 20))
        self.assertEqual(task.status, TaskStatus.TODO)
        self.assertEqual(task.created_at, now)
        self.assertEqual(task.updated_at, now)
        self.assertListEqual(task.assignments, [])

    def test_as_dict(self):
        now = datetime.now()
        task = TaskModel(
            name="Example Task",
            description="This is an example task",
            due_date=datetime(2024, 2, 20),
            status=TaskStatus.TODO,
            created_at=now,  # Set manually for the sake of testing
            updated_at=now
        )

        expected_dict = defaultdict()
        expected_dict['id'] = None  # The id is to be auto-generated by the DB
        expected_dict['name'] = 'Example Task'
        expected_dict['description'] = 'This is an example task'
        expected_dict['due_date'] = '2024-02-20T00:00:00'
        expected_dict['status'] = 'todo'
        expected_dict['created_at'] = now.isoformat()
        expected_dict['updated_at'] = now.isoformat()

        task_dict = task.as_dict()

        self.assertDictEqual(task_dict, expected_dict)
